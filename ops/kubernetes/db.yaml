  
# apiVersion: v1
# kind: Service
# metadata:
#   name: db
#   labels:
#     app: postgres
# spec:
#   ports:
#     - port: 5432
#   selector:
#     app: postgres
#     tier: postgreSQL
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: postgres-claim
#   labels:
#     app: postgres
# spec:
#   accessModes:
#     - ReadWriteOnce
#   volumeMode: Filesystem
#   resources:
#     requests:
#       storage: 2Gi
# ---
# kind: Deployment
# apiVersion: apps/v1
# metadata:
#   name: postgresql
#   labels:
#     app: postgres
# spec:
#   replicas: 1
#   revisionHistoryLimit: 10
#   selector:
#     matchLabels:
#       app: postgres
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: postgres
#         tier: postgreSQL
#     spec:
#       containers:
#         - image: postgres:9.6.2-alpine
#           name: postgresql
#           env:
#             - name: POSTGRES_USER
#               value: docker
#             - name: POSTGRES_DB
#               value: cms
#             - name: POSTGRES_PASSWORD
#               value: docker
#           ports:
#             - containerPort: 5432
#               name: postgresql
#           volumeMounts:
#             - name: postgresql
#               mountPath: /var/lib/postgresql/data
#               subPath: data
#       volumes:
#         - name: postgresql
#           persistentVolumeClaim:
#             claimName: postgres-claim

apiVersion: v1
kind: ConfigMap
metadata:
  name: init-mongo
data:
  init-mongo.js: |
    db.createUser(
        {
            user: "docker",
            pwd: "docker",
            roles: [
                {
                    role: "readWrite",
                    db: "cms"
                }
            ]
        }
    );
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: db
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        selector: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:4.0.8
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: docker
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: docker
          - name: MONGO_INITDB_DATABASE
            value: cms
        ports:
          - containerPort: 27017
            name: mongodb
        volumeMounts:
        - name: mongodb-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: mongodb-data
          mountPath: /data/db
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data-claim
        - name: mongodb-scripts
          configMap:
            name: init-mongo
            items:
            - key: init-mongo.js
              path: init-mongo.js
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: mongodb
spec:
  clusterIP: None
  selector:
    app: mongodb
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongodb-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi